/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int len = inorder.size();
        if(len == 0) return NULL;
        if(len == 1) {
            TreeNode* node = new TreeNode(-1);
            node->left = NULL;
            node->right = NULL;
            node->val = inorder[0];
            return node;
        }

        int rootVal = postorder.back();
        int leftPart = -1;
        while(inorder[leftPart+1]!=rootVal){
            leftPart++;
        }
        vector<int> leftInorder={}, rightInorder={}, leftPostorder={}, rightPostorder={};
        if(leftPart>-1)
            leftInorder = vector<int>(inorder.begin(), inorder.begin()+leftPart+1);
            leftPostorder = vector<int>(postorder.begin(), postorder.begin()+leftPart+1);
        if(leftPart!=len-2)
            rightInorder = vector<int>(inorder.begin()+leftPart+2, inorder.end());
            rightPostorder = vector<int>(postorder.begin()+leftPart+1, postorder.end()-1);
        TreeNode* root=new TreeNode(-1);
        root->val = rootVal;
        root->left = buildTree(leftInorder,leftPostorder );
        root->right = buildTree(rightInorder, rightPostorder);
        return root;
    }
};